<% include head.ejs %>
<% include nav.ejs %>
<% include sidebar.ejs %>


<div class="tabbable">
	<div class="pageTitle">
		<div class="btn-group" onclick="onWorkspace()">
			<button class="btn btn-large " id="viewNetTitle"></button>
			<button class="btn btn-large  dropdown-toggle" onclick="onWorkspace()" data-toggle="dropdown">
				<span class="caret"></span>
			</button>
			<ul class="dropdown-menu">
				<li id="netStatus"></li>
			</ul>
		</div>
		
	</div>
	<ul class="nav nav-tabs tab-title">
		<li class="active">
			<a href="#edges" data-toggle="tab" class="span5">Edges </a>
		</li>
		<li>
			<a href="#nodes" data-toggle="tab" class="span5"> Nodes </a>
		</li>
	</ul>
	<div class="tab-content">
		<div class="tab-pane active" id="edges"></div>
		<div class="tab-pane" id="nodes"></div>
	</div>
</div>
	<div id="error"></div>
<script>

// the network id passed from the ejs template
var networkRID = '<%= networkId %>';

function formatError(error){

}

function formatEdge(edge, network){
	var edgeDIV = document.createElement('div'),
		idSpan = document.createElement('span'),
		subjectSpan = document.createElement('span'),
		predicateSpan = document.createElement('span'),
		objectSpan = document.createElement('span'),
		subject = network.nodes[edge.s],
		object = network.nodes[edge.o],
		predicate = network.terms[edge.p]; 
		
	console.log(subject.represents + " : " + JSON.stringify(network.terms[subject.represents]));
	if (subject.represents && network.terms[subject.represents]){
		var term = network.terms[subject.represents];
		$(subjectSpan).addClass('term').html(term.name + ' ');
	}
	
	console.log(object.represents + " : " + JSON.stringify(network.terms[object.represents]));
	if (object.represents && network.terms[object.represents]){
		var term = network.terms[object.represents];
		$(objectSpan).addClass('term').html(' ' + term.name);
	}

	$(idSpan).addClass('edgeId').html(edge.id);
	//$(subjectSpan).addClass('nodeName').html(subject.name);
	//$(objectSpan).addClass('nodeName').html(object.name);
	$(predicateSpan).addClass('predicateName').html(predicate.name);

	
		
	$(edgeDIV).addClass('edge row-fluid')
			  .append(idSpan)
			  .append(subjectSpan)
			  .append(predicateSpan)
			  .append(objectSpan);
			  
	return edgeDIV;
}


function formatNode(node, network){
		
	var nodeDIV = document.createElement('div'),
		idSpan = document.createElement('span'),
		nameSpan = document.createElement('span');
	
	$(idSpan).addClass('nodeId').html(node.id);
	$(nameSpan).addClass('nodeName').html(node.name);
	
	$(nodeDIV).addClass('node')
			  .append(idSpan);
			  //.append(nameSpan);

	console.log(node.represents + " : " + JSON.stringify(network.terms[node.represents]));
	if (node.represents && network.terms[node.represents]){
		var term = network.terms[node.represents],
			representsSpan = document.createElement('span');
		$(representsSpan).addClass('term').html(term.name);
		$(nodeDIV).append(representsSpan);
	}
	
	return nodeDIV;

}

function onWorkspace(){
	var tempEle = document.getElementById('netStatus');
	var tempLnk = document.createElement('a');
	var found = false;
	
	
	$(tempEle).html('');
	$("input").each(function(index,value){
		if($(this).attr('title') == networkRID) {
			$(tempLnk).attr('onclick','removeFromWorkspace()').html('Remove from Workspace');
			$(tempEle).append(tempLnk);
			found = true;
		}
	});
	
	if(found)return;
	
	$(tempLnk).attr('onclick','addToWorkspace()').html('Add to Workspace');
	$(tempEle).append(tempLnk);
}

function addToWorkspace(){
	var unlst = document.createElement('ul'),
		lst = document.createElement('li'),
		cnt = document.createElement('div'),
		formBox = document.createElement('form'),
		chckbox = document.createElement('input'),
		titleSpan = document.createElement('p');
	var parent = document.getElementById('workSurface');
		
	$(titleSpan).addClass('thumbText')
		.append(networkRID);//
	$(chckbox).attr('id','checkbox' + networkRID)
		.attr('title',networkRID)
		.attr('type','checkbox');
	$(formBox).append(chckbox);
	$(cnt).addClass('thumbnail thumbIcon')
		.append(formBox)
		.append(titleSpan);
	$(lst).append(cnt);
	$(unlst).attr('id','thumbnail' + networkRID)
		.addClass('thumbnails')
		.append(lst);
	
	$(parent).append(unlst);
	onWorkspace();
}

function removeFromWorkspace(){
	var parent = document.getElementById('workSurface');

	$("input").each(function(index,value){
		if($(this).attr('title') == networkRID){
			var child = document.getElementById('thumbnail' + $(this).attr('title'));
			parent.removeChild(child);
			onWorkspace();
		}
	});
	
}

$(ndexClient.getNetwork(networkRID, function(data){
		console.log("Got results from getNetwork");
		console.log(data);
	
  		// Clears the nodes and edges divs
		$('#nodes').html('');
		$('#edges').html('');
		$('#viewNetTitle').html('');
		
		$('#viewNetTitle').append(networkRID);
  		$.each(data.network.nodes, function(index, node){
			$('#nodes').append(formatNode(node, data.network));
		});  

  		
  		$.each(data.network.edges, function(index, edge){
  			$('#edges').append(formatEdge(edge, data.network));
  		});
  		

    },
    // error handler
    function(error){
    	$('#error').append(formatError(error));
    })
);

</script>



<% include foot.ejs %>
