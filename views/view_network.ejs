<% include head.ejs %>
<% include nav.ejs %>

<div ><span id="networkSource"></span><span id="networkFormat"></span></div>
<div ><span id="nodeCount"></span><span id="edgeCount"></span></div>
<div id="networkDescription"></div>

<div class="tabbable">
    <div class="pageTitle">
        <div class="btn-group">
            <h3 id="viewNetTitle"> Network Title </h3>
        </div>
        <div class="dropdown pull-right">
            <a class="ndex-options" href="../visualizeNetwork/<%= networkId %>" target="_blank">
                <i class="icon-eye-open icon-large"></i>
            </a>
            <a class="ndex-options dropdown-toggle" href="javascript:void(0)"
               onclick="updateWorkspaceTools('<%= networkId %>')" data-toggle="dropdown">
                <i class="icon-cog icon-large"></i>
            </a>
            <ul class="dropdown-menu">
                <li id="netStatus"></li>
                <li><a href="#networkDisplay" data-toggle="modal"> Network Display </a></li>
                <li><a href="/editNetworkMetadata/<%= networkId %>" class="networkMiniMenu"> Edit Network MetaData </a></li>
                <li><a href="#" class="networkMiniMenu" style="display:none"> Edit Network Permissions </a></li>
                <li><a href="#" class="networkMiniMenu" style="display:none"> Publish Network </a></li>
            </ul>
        </div>

    </div>
    <ul class="nav nav-tabs tab-title">
        <li class="active">
            <a href="#edges" data-toggle="tab" class="span5">Edges </a>
        </li>
        <li>
            <a href="#nodes" data-toggle="tab" class="span5"> Nodes </a>
        </li>
    </ul>
    <div class="tab-content">
        <div class="tab-pane active" id="edges"></div>
        <div class="tab-pane" id="nodes"></div>
    </div>
</div>
<div id="message"></div>


<!-- //network display modal -->

<div id="networkDisplay" class=" modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
     aria-hidden="true">
    <div class="modal-header">
        <h4 id="myModalLabel"> Network Display Options </h4>
    </div>
    <div class="modal-body">
        <form>
            <strong> Nodes </strong> <br>
            <label class="span2">Nodes per page: </label>
            <input id="nodeCount" type="text" class="span2" pattern="" min="1"> <br>
            <label class="span2">Current page: </label>
            <input id="nodePage" type="text" class="span2" pattern="" min="1" placeholder="0"> <br>
            <strong> Edges </strong> <br>
            <label class="span2">Edges per page: </label>
            <input id="edgeCount" type="text" class="span2" pattern="/^[0-9]+$/" min="1"> <br>
            <label class="span2">Current page: </label>
            <input id="edgePage" type="text" class="span2" pattern="" min="1" placeholder="0"> <br>
        </form>
    </div>
    <div class="modal-footer">
        <button class="btn" onclick="getNetwork()" data-dismiss="modal" aria-hidden="true"> Save Changes</button>
        <button class="btn" data-dismiss="modal" aria-hidden="true"> Cancel</button>
    </div>
</div>
<script>


    // the network id passed from the ejs template
    var networkRID = '<%= networkId %>';
    var networkPage;
    var thisNetwork = {jid: networkRID}; //object to be used for workspace functions

    function formatEdge(edge, network) {
        var edgeDIV = document.createElement('div'),
                idSpan = document.createElement('span'),
                subjectSpan = document.createElement('span'),
                predicateSpan = document.createElement('span'),
                objectSpan = document.createElement('span'),
                subject = network.nodes[edge.s],
                object = network.nodes[edge.o],
                predicate = network.terms[edge.p];

        //console.log("subject: " + subject.name + " represents " + subject.represents + " : " + JSON.stringify(network.terms[subject.represents]));
        if (subject.represents && network.terms[subject.represents] && network.terms[subject.represents].name) {
            var term = network.terms[subject.represents];
            $(subjectSpan).addClass('term').html(term.name + ' ');
        } else {
            $(subjectSpan).addClass('term').html(subject.name + ' ');
        }

        //console.log("object: " + object.name + " represents " + object.represents + " : " + JSON.stringify(network.terms[object.represents]));
        if (object.represents && network.terms[object.represents] && network.terms[object.represents].name) {
            var term = network.terms[object.represents];
            $(objectSpan).addClass('term').html(' ' + term.name);
        } else {
            $(objectSpan).addClass('term').html(object.name + ' ');
        }

        $(idSpan).addClass('edgeId').html(edge.id);
        //$(subjectSpan).addClass('nodeName').html(subject.name);
        //$(objectSpan).addClass('nodeName').html(object.name);
        $(predicateSpan).addClass('predicateName').html(predicate.name);


        $(edgeDIV).addClass('edge row-fluid')
                .append(idSpan)
                .append(subjectSpan)
                .append(predicateSpan)
                .append(objectSpan);

        return edgeDIV;
    }


    function formatNode(node, network) {

        var nodeDIV = document.createElement('div'),
                idSpan = document.createElement('span'),
                nameSpan = document.createElement('span');

        $(idSpan).addClass('nodeId').html(node.id);
        $(nameSpan).addClass('nodeName').html(node.name);

        $(nodeDIV).addClass('node')
                .append(idSpan);
        //.append(nameSpan);

        console.log(node.name + " represents " + node.represents + " : " + JSON.stringify(network.terms[node.represents]));
        if (node.represents && network.terms[node.represents] && network.terms[node.represents].name) {
            var term = network.terms[node.represents],
                    representsSpan = document.createElement('span');
            $(representsSpan).addClass('term').html(term.name);
            $(nodeDIV).append(representsSpan);
        } else {
            var representsSpan = document.createElement('span');
            $(representsSpan).addClass('term').html(node.name);
            $(nodeDIV).append(representsSpan);
        }

        return nodeDIV;

    }


    function getNetwork() {
        getNodes();
        getEdges();
    }

    function getNodes(currentPage) {
        console.log("profile = " + JSON.stringify(ndexUI.user.profile));
        var nodesPerPage = ndexUI.user.profile.nodesPerPage | 15;

        if (!currentPage) {
            currentPage = 1;
        }

        var pageOffset = currentPage - 1;

        $(ndexClient.getNetworkByNodes(networkRID, '', '', nodesPerPage, pageOffset, function (data) {
                    $('#nodes').html('');
                    $('#viewNetTitle').html('');
                    $('#viewNetTitle').append(data.network.title);
                    thisNetwork.title = data.network.title;

                    $.each(data.network.nodes, function (index, node) {
                        $('#nodes').append(formatNode(node, data.network));
                    });

                    $('#nodes').append(ndexUI.createPaginationModule(nodesPerPage, currentPage, data.network.nodes.length, 'getNodes'));
                    //$('#nodePage').attr('placeholder', 'max value: ' + data.network.blockAmount);
                },
                function (error) {
                    ndexUI.formatError(error);
                })
        );
    }

    function getEdges(currentPage) {
        var edgesPerPage = ndexUI.user.profile.edgesPerPage | 15;

        if (!currentPage) {
            currentPage = 1;
        }

        var pageOffset = currentPage - 1;

        $(ndexClient.getNetworkByEdges(networkRID, '', '', '', '', edgesPerPage, pageOffset, function (data) {
                    $('#edges').html('');
                    networkPage = data.network;
                    $.each(data.network.edges, function (index, edge) {
                        $('#edges').append(formatEdge(edge, data.network));
                    });

                    $('#edges').append(ndexUI.createPaginationModule(edgesPerPage, currentPage, data.network.edges.length, 'getEdges'));
                    //$('#edgePage').attr('placeholder', 'max value: ' + data.network.blockAmount);
                },
                function (error) {
                    ndexUI.formatError(error);
                })
        );
    }

    //ownedNetwork

    //prevent settings dropdown from closing when an input form is clicked
    $('.dropdown-menu input, .dropdown-menu label').click(function (e) {
        e.stopPropagation();
    });

    ndexUI.initPage(function(){

        console.log("calling getNetworkMetadata for viewNetwork");
        $(ndexClient.getNetworkMetadata(networkRID,
                // success
                function (data) {
                    console.log("Got results from getNetworkMetadata");
                    console.log(data);
                    if (data.network.format) {
                        $('#networkFormat').html("&nbsp;<b>Format:</b> " + data.network.format);
                    }
                    if (data.network.edgeCount) $('#edgeCount').html("&nbsp;<b>Edges:</b> " + data.network.edgeCount);
                    if (data.network.nodeCount) $('#nodeCount').html("<b>Nodes:</b> " + data.network.nodeCount);
                    var properties = data.network.properties;
                    if (properties) {
                        if (properties.title) $('#networkTitle').html("<h3>" + properties.title + "</h3>");
                        if (properties.description) $('#networkDescription').html("<b>Description: </b> " + properties.description);
                        if (properties.source) $('#networkSource').html("<b>Source:</b> " + properties.source);
                    }

                    getNetwork();

                },
                // error handler
                function (error) {
                    ndexUI.formatError(error);
                })
        );
    });


    setTimeout(function () {
                if (ndexUI.user.id && ndexUI.isOwnedNetwork(networkRID)) {
                    $('.networkMiniMenu').attr('style', 'display:block');
                }
            },
            1000
    );

</script>


<% include sidebar.ejs %>
<% include foot.ejs %>
