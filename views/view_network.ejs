<% include head.ejs %>
<% include nav.ejs %>
<% include sidebar.ejs %>


<div class="tabbable">
	<div class="pageTitle">
		<div class="btn-group" > 
			<h4 id = "viewNetTitle"> Network Title </h4>
		</div>
		<div class="btn-group pull-right">
			<button class = "btn btn-large dropdown-toggle" onclick="onWorkspace()" data-toggle="dropdown"> 
				<i class="icon-cog icon-large"></i> 
			</button>
			<ul class="dropdown-menu">
				<li id="netStatus"></li>
				<li> <a href = "#networkDisplay" data-toggle="modal"> Network Display </a></li>
			</ul>
		</div>
			
	</div>
	<ul class="nav nav-tabs tab-title">
		<li class="active">
			<a href="#edges" data-toggle="tab" class="span5">Edges </a>
		</li>
		<li>
			<a href="#nodes" data-toggle="tab" class="span5"> Nodes </a>
		</li>
	</ul>
	<div class="tab-content">
		<div class="tab-pane active" id="edges"></div>
		<div class="tab-pane" id="nodes"></div>
	</div>
</div>
	<div id="error"></div>
	
	
<!-- //network display modal -->

<div id = "networkDisplay" class = " modal hide fade" tabindex = "-1" role = "dialog" aria-labelledby = "myModalLabel" aria-hidden = "true">
	<div class = "modal-header">
		<h4 id = "myModalLabel"> Network Display Options </h4>
	</div>
	<div class="modal-body">
		<form> 
		<strong> Nodes </strong> <br>
		<label class = "span2">Nodes per page: </label>
		<input id = "nodeCount" type = "text" class = "span2" pattern = "" min = "1"> <br>
		<label class = "span2">Current page: </label>
		<input id = "nodePage" type = "text" class = "span2" pattern = "" min = "1" placeholder = "0"> <br>
		<strong> Edges </strong> <br>
		<label class = "span2">Edges per page: </label>
		<input id = "edgeCount" type = "text" class = "span2" pattern = "/^[0-9]+$/" min = "1"> <br>
		<label class = "span2">Current page: </label>
		<input id = "edgePage" type = "text" class = "span2" pattern = "" min = "1" placeholder = "0"> <br>
		</form> 
	</div>
	<div class = "modal-footer">
		<button class = "btn" onclick = "getNetwork()" data-dismiss = "modal" aria-hidden = "true"> Save Changes </button>
		<button class = "btn" data-dismiss = "modal" aria-hidden = "true"> Cancel </button>
	</div>
</div>
<script>

// the network id passed from the ejs template
var networkRID = '<%= networkId %>';

function formatError(error){

}

function formatEdge(edge, network){
	var edgeDIV = document.createElement('div'),
		idSpan = document.createElement('span'),
		subjectSpan = document.createElement('span'),
		predicateSpan = document.createElement('span'),
		objectSpan = document.createElement('span'),
		subject = network.nodes[edge.s],
		object = network.nodes[edge.o],
		predicate = network.terms[edge.p]; 
		
	console.log(subject.represents + " : " + JSON.stringify(network.terms[subject.represents]));
	if (subject.represents && network.terms[subject.represents]){
		var term = network.terms[subject.represents];
		$(subjectSpan).addClass('term').html(term.name + ' ');
	}
	
	console.log(object.represents + " : " + JSON.stringify(network.terms[object.represents]));
	if (object.represents && network.terms[object.represents]){
		var term = network.terms[object.represents];
		$(objectSpan).addClass('term').html(' ' + term.name);
	}

	$(idSpan).addClass('edgeId').html(edge.id);
	//$(subjectSpan).addClass('nodeName').html(subject.name);
	//$(objectSpan).addClass('nodeName').html(object.name);
	$(predicateSpan).addClass('predicateName').html(predicate.name);

	
		
	$(edgeDIV).addClass('edge row-fluid')
			  .append(idSpan)
			  .append(subjectSpan)
			  .append(predicateSpan)
			  .append(objectSpan);
			  
	return edgeDIV;
}


function formatNode(node, network){
		
	var nodeDIV = document.createElement('div'),
		idSpan = document.createElement('span'),
		nameSpan = document.createElement('span');
	
	$(idSpan).addClass('nodeId').html(node.id);
	$(nameSpan).addClass('nodeName').html(node.name);
	
	$(nodeDIV).addClass('node')
			  .append(idSpan);
			  //.append(nameSpan);

	console.log(node.represents + " : " + JSON.stringify(network.terms[node.represents]));
	if (node.represents && network.terms[node.represents]){
		var term = network.terms[node.represents],
			representsSpan = document.createElement('span');
		$(representsSpan).addClass('term').html(term.name);
		$(nodeDIV).append(representsSpan);
	}
	
	return nodeDIV;

}

function onWorkspace(){
	var tempEle = document.getElementById('netStatus');
	var tempLnk = document.createElement('a');
	var found = false;
	
	
	$(tempEle).html('');
	$("input").each(function(index,value){
		if($(this).attr('title') == networkRID) {
			$(tempLnk).attr('onclick','removeFromWorkspace()').html('Remove from Workspace');
			$(tempEle).append(tempLnk);
			found = true;
		}
	});
	
	if(found)return;
	
	$(tempLnk).attr('onclick','addToWorkspace()').html('Add to Workspace');
	$(tempEle).append(tempLnk);
}

function addToWorkspace(){
	var unlst = document.createElement('ul'),
		lst = document.createElement('li'),
		cnt = document.createElement('div'),
		formBox = document.createElement('form'),
		chckbox = document.createElement('input'),
		titleSpan = document.createElement('p');
	var parent = document.getElementById('workSurface');
		
	$(titleSpan).addClass('thumbText')
		.append(networkRID);//
	$(chckbox).attr('id','checkbox' + networkRID)
		.attr('title',networkRID)
		.attr('type','checkbox');
	$(formBox).append(chckbox);
	$(cnt).addClass('thumbnail thumbIcon')
		.append(formBox)
		.append(titleSpan);
	$(lst).append(cnt);
	$(unlst).attr('id','thumbnail' + networkRID)
		.addClass('thumbnails')
		.append(lst);
	
	$(parent).append(unlst);
	onWorkspace();
}

function removeFromWorkspace(){
	var parent = document.getElementById('workSurface');

	$("input").each(function(index,value){
		if($(this).attr('title') == networkRID){
			var child = document.getElementById('thumbnail' + $(this).attr('title'));
			parent.removeChild(child);
			onWorkspace();
		}
	});
	
}

function createPaginationModule(pageAmount, page, type) {

	var pagDiv = document.createElement('div');
	var pagUl = document.createElement('ul');

	/*for(var ii = 0; ii < pageAmount; ii++){
		var pagLi = document.createElement('li');
		var pagA = document.createElement('a');
		
		if(ii == page) { $(pagLi).addClass('active') };
		
		$(pagA).attr('onclick','get'+type+'(Number(this.innerHTML))').html( ii + 1);
		$(pagLi).append(pagA);
		$(pagUl).append(pagLi);
	}*/
	var prevLi = document.createElement('li');
	var prev = document.createElement('a');
	var nextLi = document.createElement('li');
	var next = document.createElement('a');
	
	if(page == 0) $(prevLi).addClass('active');
	if(page == (pageAmount - 1)) $(nextLi).addClass('active');
	
	$(prev).attr('onclick','get'+type+'(Number(this.id))').attr('id', page).html('prev');
	$(next).attr('onclick','get'+type+'(Number(this.id))').attr('id', page+2).html('next');
	$(prevLi).append(prev);
	$(nextLi).append(next);
	$(pagUl).append(prevLi).append(nextLi);
	
	
	$(pagDiv).addClass('pagination pagination-centered').append(pagUl);
	return pagDiv;
}

function getNetwork(){
	getNodes();
	getEdges();
}

function getNodes(nodePage){
	var nodeInput = document.getElementById('nodeCount');
	var nodeCount = $(nodeInput).val();
	
	if(!nodePage) { nodePage = $('#nodePage').val(); }

	if(!nodeCount) { 
		$(nodeInput).val(15);
		nodeCount = 15;
	}
	if(!nodePage) { nodePage = 1; }
	
	$('#nodePage').val(nodePage);
	nodePage = nodePage -1;
	
	$(ndexClient.getNetworkByNodes(networkRID, '', '', nodeCount, nodePage, function(data) {
		$('#nodes').html('');
		$('#viewNetTitle').html('');
		$('#viewNetTitle').append(data.network.title);
		
		$.each(data.network.nodes, function(index, node){
  			$('#nodes').append(formatNode(node, data.network));
  		});
  		
  		$('#nodes').append(createPaginationModule(data.network.blockAmount, nodePage, 'Nodes'));
  		$('#nodePage').attr('placeholder', 'max value: ' + data.network.blockAmount);
		},
		function(error){
			$('#error').append(formatError(error));
		})
	);
}

function getEdges(edgePage){
	var edgeInput = document.getElementById('edgeCount');
	var edgeCount = $(edgeInput).val();
	
	if(!edgePage) { edgePage = $('#edgePage').val(); }

	if(!edgeCount) { 
		$(edgeInput).val(15);
		edgeCount = 15;
	}
	if(!edgePage) { edgePage = 1; }
	
	$('#edgePage').val(edgePage);
	edgePage = edgePage - 1;
	
	$(ndexClient.getNetworkByEdges(networkRID, '', '', '', '', edgeCount, edgePage, function(data) {
		$('#edges').html('');
		$.each(data.network.edges, function(index, edge){
  			$('#edges').append(formatEdge(edge, data.network));
  		});
  		
  		$('#edges').append(createPaginationModule(data.network.blockAmount, edgePage, 'Edges'));
  		$('#edgePage').attr('placeholder', 'max value: ' + data.network.blockAmount);
		},
		function(error){
			$('#error').append(formatError(error));
		})
	);
}
//prevent settings dropdown from closing when an input form is clicked
$('.dropdown-menu input, .dropdown-menu label').click(function(e) {
	e.stopPropagation();
});

getNetwork();

</script>



<% include foot.ejs %>
